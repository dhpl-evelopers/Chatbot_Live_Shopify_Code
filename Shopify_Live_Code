             <!-- AI. RINGEXPERT -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>AI. RingExpert</title>
    <style>
    
        /* Oregon LDO Font */
        @font-face {
            font-family: 'Oregon LDO';
            src: url('https://cdn.shopify.com/s/files/1/0843/6917/8903/files/OregonLDO-Light.woff2') format('woff2');
            font-weight: 300;
            font-style: normal;
            font-display: swap;
        }

        /* FONT FIX: Force Oregon LDO on all dynamically generated content */
        #ringexpert-chatbot *,
        .response-content,
        .response-content *,
        .point-text,
        .point-text *,
        .message.bot,
        .message.bot *,
        .response-container,
        .response-container *,
        .follow-up-btn,
        .follow-up-title,
        .typing-indicator,
        .font-fix,
        .font-fix * {
            font-family: 'Oregon LDO', serif !important;
            font-weight: 300 !important;
        }

        /* NUCLEAR FONT FIX - Override any inline styles or backend formatting */
        .response-container [style],
        .response-content [style],
        .point-text [style],
        .message.bot [style] {
            font-family: 'Oregon LDO', serif !important;
            font-weight: 300 !important;
        }

        /* Force font on text nodes after DOM insertion */
        .response-container::after,
        .response-content::after {
            font-family: 'Oregon LDO', serif !important;
        }

        /* Links with Oregon LDO */
        .response-link,
        .highlight-link,
        .response-content a {
            font-family: 'Oregon LDO', serif !important;
            font-weight: 400 !important;
        }

        /* Bold text with Oregon LDO */
        .response-content strong,
        .point-text strong {
            font-family: 'Oregon LDO', serif !important;
            font-weight: 600 !important;
        }


        /* Base Styles */
        body {
            margin: 0;
            padding: 0;
        }
        
        #ringexpert-chatbot {
            font-family: 'Oregon LDO', serif;
            --primary: #000000;
            --secondary: #c9a45d;
            --border: #e0e0e0;
            --button-bg: #ecebe7;
        }
        
        /* Chat Icon */
        #chatbot-icon {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            background: var(--primary);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 10001;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            font-size: 28px;
            transition: all 0.3s ease;
        }
        
        /* Chatbot background with transparency */
        #chatbot-modal {
            background-color: rgba(255, 255, 255, 0.7);
            position: relative;
            z-index: 1;
        }
        
        /* Background image with watermark effect */
        #chatbot-modal::before {
            content: "";
            background-image: url('https://cdn.shopify.com/s/files/1/0843/6917/8903/files/logo_in_black.png?v=1750913006');
            background-size: 300px;
            background-repeat: no-repeat;
            background-position: center;
            opacity: 0.08;
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: -1;
            pointer-events: none;
        }
        
        /* Smaller image size and reduced opacity on mobile */
        @media only screen and (max-width: 450px) {
            #chatbot-modal::before {
                background-size: 220px;
                opacity: 0.05;
            }
        }
/* Add this before any mobile media queries */
@keyframes zoomPulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.15); }
}

#chatbot-icon {
  position: fixed;
  bottom: 30px;
  right: 30px;
  width: 60px;
  height: 60px;
  background: var(--primary);
  color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10001;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  font-size: 28px;
  /* Animation properties */
  animation: zoomPulse 1.8s ease-in-out infinite;
  -webkit-animation: zoomPulse 1.8s ease-in-out infinite;
  will-change: transform;
  transform-origin: center center;
}

/* Mobile-specific adjustments */
@media only screen and (max-width: 450px) {
  #chatbot-icon {
    bottom: 20px;
    right: 20px;
    /* Ensure animation continues on mobile */
    animation: zoomPulse 1.8s ease-in-out infinite !important;
    -webkit-animation: zoomPulse 1.8s ease-in-out infinite !important;
  }
  
  #chatbot-icon.hidden {
    opacity: 0;
    pointer-events: none;
    /* Keep animation running when hidden */
    animation: zoomPulse 1.8s ease-in-out infinite !important;
    -webkit-animation: zoomPulse 1.8s ease-in-out infinite !important;
  }
}
        /* Welcome bubble */
        #chat-welcome-bubble {
            position: fixed;
            bottom: 100px;
            right: 30px;
            background: var(--primary);
            color: white;
            padding: 8px 12px;
            border-radius: 16px;
            font-size: 11px;
            z-index: 10000;
            max-width: 160px;
            line-height: 1.3;
            opacity: 1;
        }
        
        /* Mobile-specific styles */
        @media only screen and (max-width: 450px) {
            #chatbot-modal {
                width: 100% !important;
                height: 100% !important;
                max-height: 100% !important;
                bottom: 0 !important;
                right: 0 !important;
                border-radius: 0 !important;
                border: none !important;
            }
            
            .chatbot-body {
                height: calc(100% - 60px) !important;
            }
            
            .content-area {
                padding: 20px 20px 5px;
                min-width: 0;
                overflow-x: hidden;
            }
            
            #chatbot-icon {
                bottom: 20px;
                right: 20px;
                transition: opacity 0.3s ease, transform 0.3s ease;
            }
            
        #chatbot-icon.hidden {
  opacity: 0;
  pointer-events: none;
  /* Ensure animation continues even when hidden */
  animation: zoomPulse 1.8s ease-in-out infinite !important;
  -webkit-animation: zoomPulse 1.8s ease-in-out infinite !important;
}

            
            /* Header adjustments for mobile */
            .chatbot-header {
                padding: 12px 15px;
            }
            
            /* Logo sizing */
            .header-left img {
                width: 50px;
                height: 50px;
                margin-right: 10px;
            }
            
            /* Welcome message adjustments */
            .welcome-message .title {
                font-size: 14px;
            }
            
            .welcome-message .subtitle {
                font-size: 12px;
            }
            
            /* Button grid adjustments */
            .button-grid, .expanded-options {
                gap: 10px;
            }
            
            .chat-option {
                font-size: 10px;
                min-height: 48px;
            }
        }
        
        /* Modal - Fixed size for all devices */
        #chatbot-modal {
            position: fixed;
            bottom: 100px;
            right: 30px;
            width: 380px;
            height: 580px;
            background: white;
            border-radius: 12px;
            box-shadow:none;
            z-index: 10000;
            flex-direction: column;
            overflow: hidden;
            border: 1px solid var(--border);
            display: none;
        }

        /* Header */
        .chatbot-header {
            background: var(--primary);
            color: white;
            padding: 14px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: relative;
            z-index: 1;
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 18px;
            font-weight: 500;
        }

        .header-close {
            font-size: 24px;
            cursor: pointer;
            line-height: 1;
        }

        /* Body */
        .chatbot-body {
            display: flex;
            flex-direction: column;
            height: 100%;
            overflow: hidden;
        }
        
        .content-area {
            flex: 1;
            overflow-y: auto;
            padding: 20px 20px 10px;
        }

        .welcome-message {
            text-align: center;
            margin-bottom: 24px;
        }
        
        .welcome-message .title {
            font-family: 'Oregon LDO', serif !important;
            font-size: 14px;
            font-weight: 300;
            margin-bottom: 4px;
            color: var(--primary);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            width: 100%;
            text-align: center;
            padding: 0 10px;
        }
        
        .welcome-message .subtitle {
            font-size: 13px;
            color: #555;
            margin-bottom: 16px;
        }

        /* Button grid - Always 2 columns */
        .button-grid,
        .expanded-options {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 12px;
            margin-bottom: 16px;
            padding: 0 10px;
        }

        /* Prompt Button Style */
        .chat-option {
            background: #edebe8;
            color: #000000;
            border: 1px solid #222;
            border-radius: 15px;
            padding: 12px 10px;
            font-size: 11px;
            font-family: 'Oregon LDO', serif !important;
            box-shadow:none;
            cursor: pointer;
            min-height: 52px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            transition: all 0.2s ease-in-out;
            width: 100%;
        }

        .chat-option:hover {
            background-color: #e7e4e1;
        }

        /* See More / See Less Buttons */
        .chat-option.see-more,
        .chat-option.see-less {
            background: transparent;
            color: #555;
            border: none;
            text-transform: lowercase;
            box-shadow: none;
            padding: 0;
            min-height: auto;
            height: auto;
            text-align: center;
            justify-content: center;
        }

        /* Messages container */
        .message-container {
            padding: 0 0 15px;
        }

        .message {
            margin-bottom: 12px;
            padding: 10px 14px;
            border-radius: 18px;
            max-width: 80%;
            font-size: 11px;
            line-height: 1.4;
        }

        .bot {
            background: #ffffff;
            color: #000000;
            margin-right: auto;
            border-radius: 18px;
            border-bottom-left-radius: 4px;
            padding: 10px 14px;
            max-width: 80%;
            font-size: 11px;
            line-height: 1.4;
            border: 1px solid #e0e0e0;
        }

        .user {
            background: #f5f5f5;
            color: #000000;
            margin-left: auto;
            border-radius: 18px;
            border-bottom-right-radius: 4px;
            padding: 10px 14px;
            max-width: 80%;
            font-size: 11px;
            line-height: 1.4;
        }

        /* Input container */
        .input-container {
            padding: 8px 20px;
            border-top: 1px solid var(--border);
            background: white;
            position: sticky;
            bottom: 0;
        }
.response-link {
    text-decoration: underline;
    color: #0066cc;
}

.highlight-link {
    color: #c9a45d; /* gold tone */
    font-weight: 500;
}

.response-link:hover {
    color: var(--primary); /* Black color */
    text-decoration: none;
}
        .input-wrapper {
            position: relative;
            display: flex;
            align-items: center;
        }

        .chat-input {
            width: 100%;
            padding: 12px 40px 12px 15px;
            border: 1px solid var(--border);
            border-radius: 20px;
            font-family: inherit;
            font-size: 14px;
            outline: none;
        }

        .chat-input:focus {
            border-color: var(--secondary);
        }

        /* Send button */
        .send-button {
            position: absolute;
            right: 8px;
            background: transparent;
            border: none;
            width: 28px;
            height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: var(--primary);
            padding: 0;
            margin: 0;
        }

        .send-button svg {
            width: 18px;
            height: 18px;
        }
        
        /* Prompt Box */
        .prompt-box {
            border: 1px solid #222;
            border-radius: 16px;
            padding: 20px 16px;
            margin: 0 10px 20px;
            background: rgba(255, 255, 255, 0.7) !important;
            box-shadow:none;
            min-width: 0;
            max-width: 100%;
        }
        
        .prompt-box.no-border {
            border: none !important;
            box-shadow: none !important;
            background: transparent !important;
            padding: 0 !important;
        }
        
        /* Typing indicator */
        /* Typing indicator */
/* Typing indicator */
.typing-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 12px 16px;
    background: #ffffff;
    border-radius: 18px;
    border: 1px solid #e0e0e0;
    width: fit-content;
    max-width: 80%;
    margin-right: auto;
    min-width: 60px;
}

.typing-dots {
    display: flex;
    align-items: center;
    height: 20px;
    gap: 4px;
}

.typing-dot {
    width: 8px;
    height: 8px;
    background-color: #000;
    border-radius: 50%;
    animation: typingAnimation 1.4s infinite ease-in-out;
}

.typing-dot:nth-child(1) {
    animation-delay: 0s;
}
.typing-dot:nth-child(2) {
    animation-delay: 0.2s;
}
.typing-dot:nth-child(3) {
    animation-delay: 0.4s;
}

@keyframes typingAnimation {
    0%, 60%, 100% { 
        transform: translateY(0);
        opacity: 0.4;
    }
    30% { 
        transform: translateY(-4px);
        opacity: 1;
    }
}

/* Mobile adjustments */
@media only screen and (max-width: 450px) {
    .typing-indicator {
        padding: 10px 14px;
        min-width: 50px;
    }
    .typing-dot {
        width: 6px;
        height: 6px;
    }
}

@keyframes typingAnimation {
    0%, 60%, 100% { 
        transform: translateY(0);
        opacity: 0.6;
    }
    30% { 
        transform: translateY(-3px);
        opacity: 1;
    }
}

/* Mobile adjustments */
@media only screen and (max-width: 450px) {
    .typing-indicator {
        padding: 10px 14px;
    }
    .typing-text {
        font-size: 12px;
    }
    .typing-dot {
        width: 5px;
        height: 5px;
    }
}
        /* Response container styling */
        .response-container {
            margin-bottom: 20px;
            border: 1px solid #e0e0e0;
            border-radius: 12px;
            padding: 16px;
            background: rgba(255, 255, 255, 0.8);
        }

        /* Response content styling */
        .response-content {
            font-size: 13px;
            line-height: 1.6;
            color: #333;
        }

        /* Point formatting */
        .response-point {
            display: flex;
            margin-bottom: 10px;
            align-items: flex-start;
        }

        .point-icon {
            color: var(--secondary);
            margin-right: 10px;
            flex-shrink: 0;
            margin-top: 3px;
        }

        .point-text {
            flex: 1;
        }

        /* Links styling */
        .response-link {
            color: var(--secondary);
            text-decoration: underline;
            word-break: break-all;
        }

        .response-link:hover {
            color: var(--primary);
        }

        /* Follow-up questions styling */
        .follow-up-container {
            margin-top: 16px;
            padding-top: 16px;
            border-top: 1px dashed #e0e0e0;
        }

        .follow-up-title {
            font-size: 12px;
            color: #666;
            margin-bottom: 12px;
            font-weight: 500;
        }

        .follow-up-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 10px;
        }
        /* Ensure the typing indicator is visible */
.message.bot {
    background: white;
    border: 1px solid #e0e0e0;
    padding: 10px 14px;
    margin: 8px 0;
}

/* Typing indicator */
/* Typing indicator */
.typing-indicator {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 12px 16px;
    font-size: 13px;
    color: #666;
    background: #ffffff;
    border-radius: 18px;
    border: 1px solid #e0e0e0;
    width: fit-content;
    max-width: 80%;
    margin-right: auto;
}

.typing-text {
    margin-right: 6px;
    font-family: 'Your-Font-Here', sans-serif;
    font-size: 13px;
}

.typing-dot {
    width: 8px;
    height: 8px;
    background-color: #666;
    border-radius: 50%;
    animation: typingAnimation 1.4s infinite ease-in-out;
}

.typing-dot:nth-child(1) {
    animation-delay: 0s;
}
.typing-dot:nth-child(2) {
    animation-delay: 0.2s;
}
.typing-dot:nth-child(3) {
    animation-delay: 0.4s;
}

@keyframes typingAnimation {
    0%, 60%, 100% { transform: translateY(0); }
    30% { transform: translateY(-5px); }
}

/* Mobile-specific typing indicator */
@media only screen and (max-width: 450px) {
    .typing-indicator {
        padding: 10px 14px;
        font-size: 12px;
    }
    .typing-text {
        font-size: 12px;
    }
    .typing-dot {
        width: 7px;
        height: 7px;
    }
}
@media only screen and (max-width: 450px) {
    /* Ensure typing indicator is visible on mobile */
    .message.bot.typing {
        margin-left: 10px;
        margin-right: auto;
    }
    
    .typing-indicator {
        gap: 6px;
        padding: 6px 0;
    }
    
    .content-area {
        -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
    }
}
/* Add this to your existing CSS */
.response-content strong,
.point-text strong {
    font-weight: 600;
    color: var(--primary);
}
        .follow-up-btn {
            background: transparent;
            color: var(--primary);
            border: 1px solid var(--primary);
            border-radius: 16px;
            padding: 10px 14px;
            font-size: 11px;
            font-family: 'Oregon LDO', serif !important;
    font-weight: 300 !important; /* Match the light weight */
    letter-spacing: 0.5px; /* Optional: Improve readability */
            cursor: pointer;
            text-align: left;
            transition: all 0.2s ease;
            width: 100%;
        }

        .follow-up-btn:hover {
            background: rgba(201, 164, 93, 0.1);
        }
        #message-container {
    overflow-y: auto;
    height: 100%;
    padding: 20px 10px 80px 10px; /* <-- Add enough bottom padding */
    box-sizing: border-box;
}
/* Desktop Header - Enlarge Logo & Text */
/* Desktop Header - Enlarge Logo & Text */
@media (min-width: 451px) {
  .header-left {
    gap: 15px !important; /* Increase spacing between logo and text */
  }
  
  .header-left span {
    font-size: 24px !important; /* Title text size (from 18px) */
    font-weight: 400 !important; /* Optional: makes text bolder */
  }
  
  
  .header-left img {
    width: 70px !important;  /* Increased from default */
    height: 70px !important; /* Maintain aspect ratio */
    margin-right: 12px !important; /* Add more spacing */
  }
}
@media (min-width: 451px) {
  .chatbot-header {
    padding: 12px 15px !important; /* Same as mobile */
  }
  
  .header-left {
    font-size: 14px !important; /* Same as mobile */
  }
  
  .header-left img {
    width: 50px !important; /* Same as mobile */
    height: 50px !important;
  }
}
/* Reduce desktop background image size only */
@media (min-width: 451px) {
  #chatbot-modal::before {
    background-size: 220px; /* Matches mobile size */
    /* opacity remains 0.3 (unchanged) */
  }
  /* Reduce desktop top spacing */
@media (min-width: 451px) {
  .prompt-box {
    padding-top: 10px !important; /* Reduced from 20px */
    margin-top: 0 !important; /* Remove default margin */
  }
  
  .welcome-message {
    margin-bottom: 12px !important; /* Reduced from 24px */
  }
  
  .welcome-message .title {
    margin-bottom: 2px !important; /* Reduced from 4px */
  }
/* Remove button shadows from all buttons on all devices */
.chat-option {
    box-shadow: none !important;
}
}
/* 1. GLOBAL FONT FORCE */
/* 1. NUCLEAR OPTION - Force Oregon LDO everywhere */
#ringexpert-chatbot *:not(input):not(button):not(textarea):not(select),
#ringexpert-chatbot ::before,
#ringexpert-chatbot ::after {
    font-family: 'Oregon LDO', serif !important;
    font-weight: 300 !important;
}

/* 2. Handle dynamic content specifically */
.response-container *,
.message.bot * {
    font-family: inherit !important;
}

/* 3. Bullet points */
.response-point::before {
    content: "•";
    font-family: 'Oregon LDO', serif !important;
}

/* 4. Links */
.response-link,
.highlight-link,
.response-content a {
    font-family: 'Oregon LDO', serif !important;
    font-weight: 400 !important; /* Slightly bolder for links */
}
/* Add to your existing CSS */
.follow-up-container {
    margin-top: 20px;
    padding-top: 15px;
    border-top: 1px dashed #e0e0e0;
}

.follow-up-title {
    font-size: 12px;
    color: #666;
    margin-bottom: 10px;
    font-weight: 500;
}

.follow-up-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 8px;
}

.follow-up-btn {
    background: transparent;
    color: var(--primary);
    border: 1px solid var(--primary);
    border-radius: 16px;
    padding: 8px 12px;
    font-size: 11px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: left;
}

.follow-up-btn:hover {
    background: rgba(201, 164, 93, 0.1);
}
/* Add these to your existing styles */
@keyframes zoomPulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.15);
  }
}

#chatbot-icon {
  animation: zoomPulse 1.8s ease-in-out infinite !important;
  will-change: transform;
  transform-origin: center center;
}






/* 5. Preload font in <head> */  </style>
</head>
<body>
    <div id="ringexpert-chatbot">
        <div id="chat-welcome-bubble">How Can I Help You?</div>
        <div id="chatbot-icon">💬</div>
        
        <div id="chatbot-modal">
            <div class="chatbot-header">
                <div class="header-left">
                    <img src="https://cdn.shopify.com/s/files/1/0843/6917/8903/files/ringsandilogo.jpg?v=1753787193" alt="RINGS & I Logo">
                    <span>AI. RingExpert</span>
                </div>
                <div class="header-close">✕</div>
            </div>
            
            <div class="chatbot-body">
                <div class="content-area">
                   <div class="prompt-box">
    <div class="welcome-message">
        <p class="title">Want to know more about RINGS & I?</p>
        <p class="subtitle">Tap a Button or Start Typing</p>
    </div>

    <div class="buttons-container">
        <div class="button-grid initial-options">
            <button class="chat-option">What Is RINGS & I?</button>
            <button class="chat-option">Where's Your Studio Location?</button>
            <button class="chat-option">Difference Between Natural and Lab-Grown Diamonds?</button>
            <button class="chat-option">What's the Price Range for Diamond Rings?</button>
            <button class="chat-option">Which Metals Do You Use?</button>
            <button class="chat-option see-more">see more...</button>
        </div>
    </div>
</div>
                    
                    <div class="expanded-options" style="display:none;">
                        <button class="chat-option">What Is RINGS & I?</button>
                        <button class="chat-option">Where Is Your Studio?</button>
                        <button class="chat-option">Difference Between Natural and Lab-Grown Diamonds?</button>
                        <button class="chat-option">What's the Price Range for Diamond Rings?</button>
                        <button class="chat-option">Which Metals Do You Use?</button>
                        <button class="chat-option">Which Metal Purities Do You Offer?</button>
                        <button class="chat-option">What is the Delivery Time?</button>
                        <button class="chat-option">Can I Customize My Ring?</button>
                        <button class="chat-option">Do You Have Engagement Rings?</button>
                        <button class="chat-option">How Can I Book an Appointment?</button>
                        <button class="chat-option see-less">see less...</button>
                    </div>
                    
                    <div class="message-container"></div>
                </div>
                
                <div class="input-container">
                    <div class="input-wrapper">
                        <input type="text" placeholder="Type Anything..." class="chat-input" id="chat-input">
                        <button class="send-button" id="send-button">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M22 2L11 13" stroke="currentColor" stroke-width="1.8" stroke-linecap="round"/>
                                <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="currentColor" stroke-width="1.8" stroke-linejoin="round"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Add this right after your FOLLOW_UP_QUESTIONS constant
let conversationHistory = {
    askedQuestions: [],    // Tracks all asked questions
    currentTopics: []      // Tracks detected topics
};
        document.addEventListener('DOMContentLoaded', function() {
            // Configuration
            const API_URL = "https://ringexpert-backend.azurewebsites.net/ask";
            const TIMEOUT = 10000;
            
            // Follow-up questions mapping
            const FOLLOW_UP_QUESTIONS = {
                "What Is RINGS & I?": [
                    "What Makes RINGS & I Different?",
                    "Book a Free Consultation"
                ],
                "Where Is Your Studio?": [
                    "How to Reach the Studio?",
                    "Book an Appointment Now"
                ],
                "What Are Your Working Days?": [
                    "Available Time Slots",
                    "Book a Visit Now",
                    "Do You Take Online Appointments?"
                ],
                "Diiference between Natural or Lab-Grown Diamonds?": [
                    "What's the Price Difference?",
                    "Can I Choose My Diamond Type?",
                    "View Certification Info"
                ],
                "What's the Price Range for Diamond Rings?": [
                    "What Affects the Price?",
                    "See Designs by Budget"
                ],
                "Which Metals Do You Use?": [
                    "Can I Mix Metal Colors?",
                    "Which One Is Best for Daily Wear?",
                    "Gold vs Platinum – What to Choose?"
                ],
                "Which Metal Purities Do You Offer?": [
                    "Which Karat Is Better?",
                    "Can I Choose Based on Budget?",
                    "Gold or Platinum – Which Lasts Longer?"
                ],
                "What is the Delivery Time?": [
                    "Can You Deliver Faster?",
                    "Can I Track My Order?",
                ],
                "Do You Have Engagement Rings?": [
                    "Show Available Engagement Rings",
                    "Are your engagement rings certified?",
                    "How much do engagement rings cost at RINGS & I?"
                ],
                "Can I Customize My Ring?": [
                    "How Does Customization Work?",
                    "See Past Custom Designs",
                    "Talk to a Ring Designer"
                ],
                "How Can I Book an Appointment?": [
                    "Book Now",
                    "What's Included in the Appointment?",
                    "Can I Reschedule Later?"
                ],
                "*": [
        "What's the difference between natural and lab-grown diamonds?",
        "What affects the price of rings?",
        "Can I see some engagement ring designs?",
        "How do I book an appointment?",
        "What's your studio location?",
        "What metals do you work with?",
        "How do I choose the right diamond?",
        "Do you offer payment plans?"
    ]


            };
            const TOPIC_FOLLOWUPS = {
    'diamond': [
        "How do the 4Cs affect diamond quality?",
        "Can I see certified diamonds?",
        "Which diamond shape looks largest?",
        "What's better - round or oval cut?",
        "How to check diamond authenticity?"
    ],
    'price': [
        "What's your most affordable option?",
        "Do you offer payment plans?",
        "How can I get the best value?",
        "Why are your prices lower than others?",
        "Show me budget-friendly options"
    ],
    'customization': [
        "Can I engrave my ring?",
        "What metal finishes are available?",
        "Can I change the center stone?",
        "How long does customization take?",
        "Can I see examples of custom rings?"
    ],
    'delivery': [
        "How safe is shipping?",
        "Do you offer international delivery?",
        "Can I get same-day delivery?",
        "What's your packaging like?",
        "Can someone else receive my order?"
    ],
    'appointment': [
        "What's included in the appointment?",
        "How long does it last?",
        "Can I do a virtual appointment?",
        "What should I bring to my appointment?",
        "Can I reschedule my appointment?"
    ],
    // ... add other topics as needed
};
            // DOM Elements
            const chatbotIcon = document.getElementById('chatbot-icon');
            const chatbotModal = document.getElementById('chatbot-modal');
            const closeButton = document.querySelector('.header-close');
            const chatInput = document.getElementById('chat-input');
            const sendButton = document.getElementById('send-button');
            const initialOptions = document.querySelector('.initial-options');
            const expandedOptions = document.querySelector('.expanded-options');
            const seeMoreBtn = document.querySelector('.see-more');
            const seeLessBtn = document.querySelector('.see-less');
            const messageContainer = document.querySelector('.message-container');
            const contentArea = document.querySelector('.content-area');
            
            // Handle small screens
            function adjustForSmallScreens() {
                if (window.innerWidth < 450) {
                    const modal = document.getElementById('chatbot-modal');
                    modal.style.right = '0';
                    modal.style.left = '0';
                    modal.style.bottom = '0';
                    modal.style.width = '100%';
                    modal.style.height = '100%';
                    modal.style.borderRadius = '0';
                    
                    const icon = document.getElementById('chatbot-icon');
                    icon.style.right = '20px';
                    icon.style.bottom = '150px';
                    
                    if (modal.style.display === 'flex') {
                        icon.style.display = 'none';
                    } else {
                        icon.style.display = 'flex';
                    }
                    
                    const bubble = document.getElementById('chat-welcome-bubble');
                    bubble.style.right = '20px';
                    bubble.style.bottom = (parseInt(icon.style.bottom) + 70) + 'px';
                } else {
                    const modal = document.getElementById('chatbot-modal');
                    modal.style.right = '30px';
                    modal.style.bottom = '100px';
                    modal.style.width = '380px';
                    modal.style.height = '580px';
                    modal.style.borderRadius = '12px';
                    
                    const icon = document.getElementById('chatbot-icon');
                    icon.style.right = '30px';
                    icon.style.bottom = '30px';
                    
                    if (modal.style.display === 'flex') {
                        icon.style.display = 'none';
                    } else {
                        icon.style.display = 'flex';
                    }
                    
                    const bubble = document.getElementById('chat-welcome-bubble');
                    bubble.style.right = '30px';
                    bubble.style.bottom = '100px';
                }
            }
            
            // Initialize chat
            function initChat() {
                adjustForSmallScreens();
                window.addEventListener('resize', adjustForSmallScreens);
                
                // Toggle modal
                chatbotIcon.addEventListener('click', function() {
                    const isOpening = chatbotModal.style.display === 'none';
                    chatbotModal.style.display = isOpening ? 'flex' : 'none';
                    document.getElementById('chat-welcome-bubble').style.display = 'none';
                    chatbotIcon.style.display = isOpening ? 'none' : 'flex';
                    
                    if (window.innerWidth < 450) {
                        document.body.style.overflow = isOpening ? 'hidden' : '';
                    }
                    
                    if (isOpening) {
                        contentArea.scrollTop = 0;
                    }
                });

                closeButton.addEventListener('click', function() {
                    chatbotModal.style.display = 'none';
                    chatbotIcon.style.display = 'flex';
                    
                    if (window.innerWidth < 450) {
                        document.body.style.overflow = '';
                    }
                });
                
                // See more/less functionality
                if (seeMoreBtn && seeLessBtn) {
                    seeMoreBtn.addEventListener('click', function() {
                        document.querySelector('.prompt-box').style.border = 'none';
                        document.querySelector('.prompt-box').style.boxShadow = 'none';
                        document.querySelector('.prompt-box').style.background = 'transparent';
                        document.querySelector('.prompt-box').style.padding = '0';
                        
                        document.querySelector('.initial-options').style.display = 'none';
                        expandedOptions.style.display = 'grid';
                    });

                    seeLessBtn.addEventListener('click', function() {
                        document.querySelector('.prompt-box').style.border = '1px solid #222';
                        document.querySelector('.prompt-box').style.boxShadow = '0 2px 4px rgba(0,0,0,0.05)';
                        document.querySelector('.prompt-box').style.background = '#ffffff';
                        document.querySelector('.prompt-box').style.padding = '20px 16px';
                        
                        document.querySelector('.initial-options').style.display = 'grid';
                        expandedOptions.style.display = 'none';
                    });
                }
                
                // Handle option button clicks
                const chatOptions = document.querySelectorAll('.chat-option:not(.see-more):not(.see-less)');
                chatOptions.forEach(option => {
                    option.addEventListener('click', function() {
                        const question = this.textContent;
                        handleMessage(question);
                    });
                });
                
                // Handle input submission
                function sendMessage() {
                    const message = chatInput.value.trim();
                    if (message) {
                        handleMessage(message);
                        chatInput.value = '';
                    }
                }
                
                chatInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') sendMessage();
                });
                
                sendButton.addEventListener('click', sendMessage);
            }
            
            // Backend API call
            async function callBackend(question) {
                try {
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), TIMEOUT);
                    
                    const response = await fetch(API_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ question }),
                        signal: controller.signal
                    });
                    
                    clearTimeout(timeoutId);
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    
                    const data = await response.json();
                    return data.answer;
                    
                } catch (error) {
                    console.error('API Error:', error);
                    throw error;
                }
            }
            
            // Create follow-up questions element
function createFollowUpQuestions(userQuestion) {
    // Update conversation history
    conversationHistory.askedQuestions.push(userQuestion);
    if (conversationHistory.askedQuestions.length > 5) {
        conversationHistory.askedQuestions.shift();
    }

    // 1. Try exact matches first
    let suggestions = FOLLOW_UP_QUESTIONS[userQuestion] || [];
    
    // 2. If no exact matches, use topic-based suggestions
    if (suggestions.length === 0) {
        const lowerQ = userQuestion.toLowerCase();
        
        // Detect topics
        if (lowerQ.includes('diamond') || lowerQ.includes('gem')) {
            suggestions.push(...TOPIC_FOLLOWUPS['diamond']);
        }
        if (lowerQ.includes('price') || lowerQ.includes('cost')) {
            suggestions.push(...TOPIC_FOLLOWUPS['price']);
        }
        // Add more topic checks as needed
    }
    
    // 3. Always include some general follow-ups
    suggestions.push(...FOLLOW_UP_QUESTIONS['*']);
    
    // Process suggestions
    suggestions = [...new Set(suggestions)] // Remove duplicates
        .filter(q => !conversationHistory.askedQuestions.includes(q)) // Remove asked questions
        .slice(0, 3); // Limit to 3
    
    if (suggestions.length === 0) return null;
    
    // Create and return UI
    const container = document.createElement('div');
    container.className = 'follow-up-container';
    container.innerHTML = `
        <div class="follow-up-title">You might also want to know:</div>
        <div class="follow-up-grid">
            ${suggestions.map(q => 
                `<button class="follow-up-btn">${q}</button>`
            ).join('')}
        </div>
    `;
    
    container.querySelectorAll('.follow-up-btn').forEach(btn => {
        btn.addEventListener('click', () => handleMessage(btn.textContent));
    });
    
    return container;
}
            
            // Format the response with professional styling and points
            // Format the response with professional styling and points
            
function formatResponse(response) {
    // Preserve all existing cleaning and URL processing
    let formatted = response.replace(/https?:\/\/[^"<\s]+">/g, '')
                          .replace(/<[^>]*>/g, '')
                          .trim();

    // Process URLs (unchanged from your original)
    const urlRegex = /(https?:\/\/[^\s<)]+)/g;
    const urls = formatted.match(urlRegex) || [];
    const highlightLinks = urls.length > 0 && urls.length <= 2;

    urls.forEach(url => {
        let cleanUrl = url.replace(/[).,"']+$/, '');
        const standardizedUrl = cleanUrl.replace(/(https?:\/\/)(?:www\.)?(ringsandi\.com)/, '$1www.$2');
        const returnUrl = standardizedUrl.includes('?') 
            ? `${standardizedUrl}&return=chatbot` 
            : `${standardizedUrl}?return=chatbot`;
        const highlightClass = highlightLinks ? ' response-link highlight-link' : ' response-link';
        formatted = formatted.replace(url, `<a href="${returnUrl}" target="_blank" rel="noopener noreferrer" class="${highlightClass}">${standardizedUrl}</a>`);
    });

    // Convert **bold** text to <strong>
    formatted = formatted.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

    // Specific handling for address-like responses
    if (isAddressResponse(formatted)) {
        return `<div class="response-content address-response">${formatted.replace(/\n/g, '<br>')}</div>`;
    }

    // Original logic for all other responses
    const points = formatted.split('\n').filter(point => point.trim().length > 0);
    
    if (points.length > 1) {
        return points.map(point => `
            <div class="response-point">
                <div class="point-icon">•</div>
                <div class="point-text">${point.trim()}</div>
            </div>
        `).join('');
    } else {
        return `<div class="response-content">${formatted}</div>`;
    }
}

// Helper function to detect address responses
function isAddressResponse(text) {
    const addressKeywords = ['studio', 'location', 'address', 'pune', 'mumbai', 'floor', 'road', 'peth', 'india', ' \d{6}'];
    const hasAddressTerms = new RegExp(addressKeywords.join('|'), 'i').test(text);
    const hasAddressFormat = text.includes(',') || text.match(/\d{6}/);
    
    return hasAddressTerms && hasAddressFormat;
}


            // Handle messages
            // Handle messages
async function handleMessage(question) {
    // Show user message
    const userMessageDiv = document.createElement('div');
    userMessageDiv.className = 'message user';
    userMessageDiv.textContent = question;
    messageContainer.appendChild(userMessageDiv);
    
    // Force immediate scroll update
    contentArea.scrollTop = contentArea.scrollHeight;
    
    // Add typing indicator with distinct class
    const typingId = `typing-${Date.now()}`;
    const typingDiv = document.createElement('div');
    typingDiv.className = 'message bot typing'; // Added 'typing' class
    typingDiv.id = typingId;
    typingDiv.innerHTML = `
    <div class="typing-indicator">
        <div class="typing-dots">
            <span class="typing-dot"></span>
            <span class="typing-dot"></span>
            <span class="typing-dot"></span>
        </div>
    </div>
`;
    
    messageContainer.appendChild(typingDiv);
    
    // Force synchronous layout update
    void typingDiv.offsetHeight;
    
    // Double scroll update for mobile browsers
    requestAnimationFrame(() => {
        contentArea.scrollTop = contentArea.scrollHeight;
        setTimeout(() => {
            contentArea.scrollTop = contentArea.scrollHeight;
        }, 50);
    });
    
    try {
        // Minimum 700ms display time for typing indicator
        const minDisplayTime = new Promise(resolve => setTimeout(resolve, 700));
        const apiCall = callBackend(question);
        
        const [response] = await Promise.all([apiCall, minDisplayTime]);
        
        // Safely remove typing indicator
        const indicator = document.getElementById(typingId);
        if (indicator) {
            indicator.style.opacity = '0';
            setTimeout(() => indicator.remove(), 200);
        }
        
        // Process and display response
        const responseContainer = document.createElement('div');
        responseContainer.className = 'response-container';
        responseContainer.innerHTML = formatResponse(response);
        
        // Add follow-up questions if available
        // Inside your handleMessage function, after getting the API response:
const followUpElement = createFollowUpQuestions(question);
if (followUpElement) {
    responseContainer.appendChild(followUpElement);
}
       
        
        messageContainer.appendChild(responseContainer);
        
    } catch (error) {
        const indicator = document.getElementById(typingId);
        if (indicator) indicator.remove();
        
        const errorDiv = document.createElement('div');
        errorDiv.className = 'message bot';
        errorDiv.textContent = "Sorry, I'm having trouble connecting. Please try again later.";
        messageContainer.appendChild(errorDiv);
    }
    
    // Final scroll with delay
    setTimeout(() => {
        contentArea.scrollTop = contentArea.scrollHeight;
    }, 100);
}
           
            
            function addTypingIndicator(id) {
                const typingDiv = document.createElement('div');
                typingDiv.className = 'message bot';
                typingDiv.id = id;
                typingDiv.innerHTML = `
    <div class="typing-indicator">
        <span class="typing-text">Typing</span>
        <div class="typing-dots">
            <span class="typing-dot"></span>
            <span class="typing-dot"></span>
            <span class="typing-dot"></span>
        </div>
    </div>
`;
                messageContainer.appendChild(typingDiv);
                // Force scroll to make indicator visible
                setTimeout(() => {
                    contentArea.scrollTop = contentArea.scrollHeight;
                }, 50);
            }
            
            function removeMessage(id) {
                const elem = document.getElementById(id);
                if (elem) elem.remove();
            }
            // Initialize
            initChat();
        });
    </script>

<!-- Upload Your Design Modal -->
<div id="uploadModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <!-- Zoho Form Embed -->
    <iframe 
      aria-label='Upload Your Design'
      src="https://forms.zohopublic.in/appointmentsring1/form/UploadYourDesign/formperma/bnp-bCq7HuwZHrRrn5mVWlfuMFNGJMCu0XXmFyvTcdg" 
      width="100%" 
      height="600" 
      frameborder="0" 
      style="border:none;">
    </iframe>
  </div>
</div>

<style>
  /* Modal background */
  .modal {
    display: none;
    position: fixed;
    z-index: 9999;
    left: 0; top: 0;
    width: 100%; height: 100%;
    background-color: rgba(0,0,0,0.6);
  }
  /* Modal content box */
  .modal-content {
    background: #fff;
    margin: 5% auto;
    padding: 0;
    border-radius: 10px;
    width: 90%;
    max-width: 750px;
    box-shadow: 0 5px 20px rgba(0,0,0,0.3);
    overflow: hidden;
  }
  /* Close button */
  .close {
    float: right;
    font-size: 28px;
    font-weight: bold;
    color: #333;
    padding: 10px 15px;
    cursor: pointer;
    background: #f4f4f4;
  }
  .close:hover {
    background: #ddd;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const modal = document.getElementById("uploadModal");
    const closeBtn = document.querySelector("#uploadModal .close");
    const ctaBtns = document.querySelectorAll(".upload-design-btn");

    ctaBtns.forEach(function(btn) {
      btn.addEventListener("click", function(e) {
        e.preventDefault(); // stop link redirect
        modal.style.display = "block"; // show modal
      });
    });

    closeBtn.addEventListener("click", function() {
      modal.style.display = "none";
    });

    window.addEventListener("click", function(event) {
      if (event.target == modal) {
        modal.style.display = "none";
      }
    });
  });
</script>


</body>
</html>


